/*-----------------------------------------------------------------------------------------------------
	FILE: CREATE_PROCEDURES.SQL
	DESCRIPTION: THIS SCRIPT CONTAIN PROCEDURE
	AUTHOR: SELVA
	DATE CREATED: 10/02/2021
*/-----------------------------------------------------------------------------------------------------


create or replace PROCEDURE PATIENT_ADMIT(pname in PATIENT.P_NAME%type,paddress in PATIENT.P_ADDRESS%TYPE,PGENDER IN PATIENT.P_GENDER%TYPE,PDOB IN PATIENT.P_DOB%TYPE,PCONTACT IN PATIENT.P_CONTACT_NO%TYPE,PSTATUS IN PATIENT.P_STATUS%TYPE,LOGINNAME IN VARCHAR2,ROOMNO IN ROOM.ROOM_NO%TYPE := NULL) AS 
	MAXID PATIENT.P_ID%TYPE;
	STATUS PATIENT.P_STATUS%TYPE;
	REC_ID NUMBER(5);
BEGIN
	  INSERT INTO PATIENT VALUES(PATIENT_SEQ.NEXTVAL,PNAME,PADDRESS,PGENDER,PDOB,PCONTACT,PSTATUS,'NOT RELEASED');
	  SELECT P_STATUS INTO STATUS FROM PATIENT WHERE P_ID=(SELECT MAX(P_ID) FROM PATIENT);
	  SELECT R_ID INTO REC_ID FROM RECEPTIONIST WHERE R_EMAIL=LOGINNAME;
	  SELECT P_ID INTO MAXID FROM PATIENT WHERE P_ID=(SELECT MAX(P_ID) FROM PATIENT);
	  INSERT INTO ASSIST_PATIENT VALUES(ASSIST_PATIENT_SEQ.NEXTVAL,MAXID,REC_ID);
	  IF(STATUS='IN DOOR') THEN
	  INSERT INTO ASSIGNED_ROOM VALUES(ASSIGNED_ROOM_SEQ.NEXTVAL,MAXID,ROOMNO);
	  UPDATE ROOM SET ROOM_STATUS='BOOKED' WHERE ROOM_NO=ROOMNO;
	  END IF;
END PATIENT_ADMIT;
/

CREATE OR REPLACE PROCEDURE PATIENT_CHECKOUT ( PATIENTID IN NUMBER ) AS 
	ROOMID ROOM.ROOM_NO%TYPE;
BEGIN
   UPDATE PATIENT SET P_CONDITION='RELEASED' WHERE P_ID=PATIENTID;
   SELECT R.ROOM_NO INTO ROOMID FROM ROOM R,ASSIGNED_ROOM A,PATIENT P WHERE   R.ROOM_NO=A.ROOM_NO AND A.P_ID=P.P_ID AND A.P_ID=PATIENTID;
   UPDATE ROOM SET ROOM_STATUS='EMPTY' WHERE ROOM_NO=ROOMID;
   UPDATE LOG_PATIENT SET RELEASE_DATE=SYSDATE WHERE PATIENT_ID=PATIENTID;
END PATIENT_CHECKOUT;
/


CREATE OR REPLACE PROCEDURE ADMIN_CHANGE_PASSWORD(UPASSWORD IN USER_TYPE.U_PASSWORD%TYPE, UEMAIL IN USER_TYPE.U_EMAIL%TYPE) AS 
BEGIN
	UPDATE USER_TYPE SET U_PASSWORD=UPASSWORD WHERE U_EMAIL=UEMAIL;
END ADMIN_CHANGE_PASSWORD;
/

CREATE OR REPLACE PROCEDURE ADD_DOCTOR(DNAME IN DOCTOR.D_NAME%TYPE, DADDRESS IN DOCTOR.D_ADDRESS%TYPE, DCONTACT IN DOCTOR.D_CONTACT_NO%TYPE, DJOINDATE IN DOCTOR.D_JOINING_DATE%TYPE, DSALARY IN DOCTOR.D_SALARY%TYPE, DDESIGNATION IN DOCTOR.D_DESIGNATION%TYPE) AS 
BEGIN
	INSERT INTO DOCTOR VALUES(DOCTOR_SEQ.NEXTVAL,DNAME,DADDRESS,DCONTACT,DJOINDATE,DSALARY,DDESIGNATION);
END ADD_DOCTOR;
/


CREATE OR REPLACE PROCEDURE ADD_NURSE(NNAME IN NURSE.N_NAME%TYPE, NADDRESS IN NURSE.N_ADDRESS%TYPE, NCONTACT IN NURSE.N_CONTACT_NO%TYPE, NJOINDATE IN NURSE.N_JOINING_DATE%TYPE, NSALARY IN NURSE.N_SALARY%TYPE, NDESIGNATION IN NURSE.N_DESIGNATION%TYPE) AS 
BEGIN
	INSERT INTO NURSE VALUES(NURSE_SEQ.NEXTVAL,NNAME,NADDRESS,NCONTACT,NJOINDATE,NSALARY,NDESIGNATION);
END ADD_NURSE;
/

CREATE OR REPLACE PROCEDURE ADD_RECEPTIONIST(RNAME IN RECEPTIONIST.R_NAME%TYPE, REMAIL IN RECEPTIONIST.R_EMAIL%TYPE, RADDRESS IN RECEPTIONIST.R_ADDRESS%TYPE, RCONTACT IN RECEPTIONIST.R_CONTACT_NO%TYPE, RJOINDATE IN RECEPTIONIST.R_JOINING_DATE%TYPE, RSALARY IN RECEPTIONIST.R_SALARY%TYPE, RDESIGNATION IN RECEPTIONIST.R_DESIGNATION%TYPE) AS 
	MAXID USER_TYPE.ID%TYPE;
	EMAIL USER_TYPE.U_EMAIL%TYPE;
BEGIN
	INSERT INTO RECEPTIONIST VALUES(RECEPTIONIST_SEQ.NEXTVAL,RNAME,REMAIL,RADDRESS,RCONTACT,RJOINDATE,RSALARY,RDESIGNATION);
	SELECT R_ID,R_EMAIL INTO MAXID,EMAIL FROM RECEPTIONIST WHERE R_ID=(SELECT MAX(R_ID) FROM RECEPTIONIST);
	INSERT INTO USER_TYPE VALUES(USER_TYPE_SEQ.NEXTVAL,'RECEPTIONIST',EMAIL,123456,MAXID);
END ADD_RECEPTIONIST;
/


CREATE OR REPLACE PROCEDURE ADD_ROOM(ROOMTYPE IN ROOM.ROOM_TYPE%TYPE, ROOMCOST IN ROOM.ROOM_COST%TYPE) AS 
BEGIN
	INSERT INTO ROOM VALUES(ROOM_SEQ.NEXTVAL, ROOMTYPE, ROOMCOST, 'EMPTY');
END ADD_ROOM;
/

CREATE OR REPLACE PROCEDURE ADMIN_PROFILE_UPDATE(UEMAIL IN ADMIN.ADMIN_EMAIL%TYPE, ANAME IN ADMIN.ADMIN_NAME%TYPE, AADDRESS IN ADMIN.ADMIN_ADDRESS%TYPE, ACONTACT IN ADMIN.ADMIN_CONTACT_NO%TYPE, ADOB IN ADMIN.DATE_OF_BIRTH%TYPE) AS 
BEGIN
	UPDATE ADMIN SET ADMIN_NAME=ANAME, ADMIN_ADDRESS=AADDRESS, ADMIN_CONTACT_NO=ACONTACT, DATE_OF_BIRTH=ADOB WHERE ADMIN_EMAIL=UEMAIL;
END ADMIN_PROFILE_UPDATE;
/


CREATE OR REPLACE PROCEDURE LOGIN_INFO_PROCEDURE(EMAIL IN USER_TYPE.U_EMAIL%TYPE) AS 
	ID USER_TYPE.ID%TYPE;
	OLD USER_TYPE.U_EMAIL%TYPE;
	CURSOR REC IS 
	SELECT LOGGED_PERSON FROM LOGIN_INFO;
	FLAG NUMBER(2):=0;
BEGIN
	  SELECT ID INTO ID FROM USER_TYPE WHERE U_EMAIL=EMAIL;
	  FOR I IN REC LOOP
		IF I.LOGGED_PERSON=ID THEN
		  FLAG:=1;
		END IF;
	  END LOOP;
	  
	  IF FLAG=1 THEN
		UPDATE LOGIN_INFO SET LOGIN_DATE=SYSDATE WHERE LOGGED_PERSON=ID;
	  ELSIF FLAG=0 THEN
		INSERT INTO LOGIN_INFO VALUES(LOGIN_INFO_SEQ.NEXTVAL,ID,SYSDATE);
	  END IF;
	  
END LOGIN_INFO_PROCEDURE; 
/